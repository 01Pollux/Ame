#pragma once

#include <Shaders/EngineShader.hpp>

namespace Ame::Rhi
{
    /*
    #ifndef STRUCT_RENDERINSTANCE
    #define STRUCT_RENDERINSTANCE
    struct RenderInstance{uint TransformId;uint BoundingId;uint IndexOffset;uint IndexCount;uint VertexOffset;uint Code;};
    #endif
    */
    class StructRenderInstanceShader : public EngineShader
    {
    private:
        // clang-format off
        static constexpr const uint8_t c_SourceCode[] {
            0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x75, 0x8E, 0x3D, 0x0A, 0x02, 0x31, 
            0x10, 0x85, 0x7B, 0xC1, 0x3B, 0x04, 0xF6, 0x18, 0xA9, 0x34, 0xA6, 0x48, 0x13, 0x21, 0x1B, 0xB7, 
            0x95, 0x65, 0x33, 0x23, 0x29, 0x9C, 0x40, 0x32, 0x81, 0x05, 0xF1, 0xEE, 0x0E, 0xAB, 0x56, 0x62, 
            0xF9, 0xBE, 0xC7, 0xFB, 0x19, 0x32, 0x52, 0x02, 0x54, 0x63, 0x0C, 0x17, 0x13, 0xAF, 0xC1, 0xFA, 
            0x93, 0x0D, 0xCE, 0x8F, 0xF1, 0xE0, 0x8D, 0xDD, 0xEF, 0x06, 0xF1, 0x32, 0xC1, 0x3F, 0xBB, 0x71, 
            0xED, 0x0B, 0xAB, 0x00, 0xD2, 0x51, 0x1D, 0x35, 0x9E, 0x69, 0x81, 0x47, 0xCF, 0xC4, 0x2A, 0xD6, 
            0x99, 0x1A, 0x96, 0x7A, 0x77, 0x49, 0x6F, 0xE0, 0x58, 0x3A, 0xA5, 0x4C, 0xB7, 0xAF, 0x9E, 0xA0, 
            0x32, 0xAC, 0x67, 0xC4, 0x06, 0xFC, 0x26, 0x4E, 0x5A, 0x7E, 0x81, 0x91, 0xDC, 0x47, 0x9B, 0x92, 
            0x40, 0x3F, 0xB5, 0xDC, 0x92, 0xC1, 0x8C, 0x2F, 0xCD, 0xFB, 0x4C, 0x6A, 0xBC, 0x00, 0x00, 0x00
        };
        // clang-format on

    public:
        static constexpr const char* Name = "Structs/RenderInstance.hlsli";

        StructRenderInstanceShader()
        {
            SetupCompressed({ "Struct RenderInstance", Dg::SHADER_TYPE_UNKNOWN }, c_SourceCode);
        }
    };
} // namespace Ame::Rhi