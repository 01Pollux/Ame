#pragma once

#include <Shaders/EngineShader.hpp>

namespace Ame::Rhi
{
    /*
    #ifndef STRUCT_DRAWINDEXEDINDIRECTCOMMAND
    #define STRUCT_DRAWINDEXEDINDIRECTCOMMAND
    struct DrawIndexedIndirectCommand{uint NumIndices;uint NumInstances;uint FirstIndexLocation;uint BaseVertex;uint FirstInstanceLocation;};
    #define DrawIndexedIndirectCommand_Size 20
    #define DrawIndexedIndirectCommand_Store(commandIndex,buffer,command,drawOffset) \
        buffer.Store(drawOffset + commandIndex * DrawIndexedIndirectCommand_Size + 0, command.NumIndices); \
        buffer.Store(drawOffset + commandIndex * DrawIndexedIndirectCommand_Size + 4, command.NumInstances); \
        buffer.Store(drawOffset + commandIndex * DrawIndexedIndirectCommand_Size + 8, command.FirstIndexLocation); \
        buffer.Store(drawOffset + commandIndex * DrawIndexedIndirectCommand_Size + 12, command.BaseVertex); \
        buffer.Store(drawOffset + commandIndex * DrawIndexedIndirectCommand_Size + 16, command.FirstInstanceLocation);
    #endif
    */
    class StructDrawIndexedIndirectCommandShader : public EngineShader
    {
    private:
        // clang-format off
        static constexpr const uint8_t c_SourceCode[] {
            0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xB5, 0x52, 0x51, 0x6B, 0xC2, 0x30, 
            0x10, 0x7E, 0x17, 0xFC, 0x0F, 0x07, 0xBE, 0xAC, 0xB3, 0x88, 0x93, 0x31, 0x06, 0x7D, 0x72, 0x4D, 
            0x07, 0x85, 0x59, 0xA1, 0xD6, 0xCD, 0x87, 0x81, 0x64, 0xED, 0x05, 0xF2, 0xD0, 0x14, 0x92, 0x2B, 
            0x93, 0x8D, 0xFD, 0xF7, 0x45, 0xE3, 0xCC, 0x9C, 0x0C, 0x7D, 0x69, 0x5E, 0x8E, 0xFB, 0xF2, 0x7D, 
            0xF7, 0x5D, 0x72, 0x37, 0x90, 0x42, 0x55, 0x28, 0x60, 0x51, 0xE4, 0xCB, 0xB8, 0x58, 0xB3, 0x7C, 
            0xFA, 0x92, 0x66, 0x2C, 0x59, 0x25, 0xCC, 0x86, 0x34, 0x4F, 0xE2, 0x22, 0x9E, 0xCF, 0x66, 0xD3, 
            0x8C, 0xF5, 0x7B, 0x03, 0xCB, 0x93, 0x0A, 0x2F, 0xA1, 0x1A, 0xD2, 0x6D, 0x49, 0xC0, 0x34, 0x7F, 
            0x4F, 0x6D, 0xF9, 0x0D, 0x56, 0x36, 0x48, 0x8D, 0x25, 0xC5, 0x4D, 0x5D, 0x73, 0x55, 0x7D, 0xB6, 
            0x52, 0x11, 0x64, 0x6D, 0xBD, 0xC5, 0x4B, 0x34, 0x91, 0xCF, 0x0D, 0x71, 0x75, 0x40, 0x1E, 0xA5, 
            0x36, 0xB4, 0x2B, 0xF1, 0xD4, 0x94, 0x9C, 0x64, 0xA3, 0x1C, 0xFE, 0xC0, 0x0D, 0x3E, 0xA3, 0x26, 
            0xDC, 0x1C, 0xF1, 0x9C, 0xF6, 0x40, 0xFD, 0x8A, 0x7C, 0xD7, 0xFF, 0xF7, 0xB2, 0x5E, 0xC8, 0x0F, 
            0x84, 0xC9, 0xF8, 0x32, 0x2E, 0x35, 0x1A, 0xAF, 0x4A, 0x97, 0xED, 0x38, 0xE1, 0x5B, 0x2B, 0x04, 
            0xEA, 0x70, 0x8F, 0x85, 0x95, 0x15, 0xCF, 0x85, 0x30, 0x48, 0x01, 0xBC, 0xF6, 0x7B, 0x60, 0x8F, 
            0x63, 0x8C, 0x9C, 0xD6, 0xDF, 0xC3, 0x10, 0x7E, 0x17, 0x82, 0xEB, 0xB3, 0x4D, 0x0E, 0x61, 0x1C, 
            0xFE, 0x68, 0x46, 0xFE, 0xF7, 0x82, 0xA8, 0x03, 0xA7, 0xDB, 0x3F, 0x4E, 0xFB, 0xB9, 0x74, 0xE2, 
            0x75, 0xEF, 0xBD, 0x4E, 0x27, 0xDE, 0x89, 0xE3, 0xCD, 0xC4, 0x5B, 0xFA, 0x65, 0xEA, 0xC6, 0xEA, 
            0xEE, 0xE4, 0x75, 0xC7, 0x7B, 0x1A, 0x6C, 0xD7, 0x14, 0xAD, 0x58, 0x7C, 0x03, 0x0D, 0x23, 0x98, 
            0xE7, 0x8E, 0x03, 0x00, 0x00
        };
        // clang-format on

    public:
        static constexpr const char* Name = "Structs/DrawIndexedIndirectCommand.hlsli";

        StructDrawIndexedIndirectCommandShader()
        {
            SetupCompressed({ "Struct DrawIndexedIndirectCommand", Dg::SHADER_TYPE_UNKNOWN }, c_SourceCode);
        }
    };
} // namespace Ame::Rhi