#pragma once

#include <Shaders/EngineShader.hpp>
#include <DiligentCore/Graphics/GraphicsTools/interface/ShaderSourceFactoryUtils.hpp>

#include <Shaders/Structs/DrawIndexedIndirectCommand.hpp>
#include <Shaders/Structs/Transform.hpp>
#include <Shaders/Structs/RenderInstance.hpp>
#include <Shaders/Structs/CameraFrameData.hpp>

namespace Ame::Rhi
{
    /*
    #include "Structs/DrawIndexedIndirectCommand.hlsli"
    #include "Structs/Transform.hlsli"
    #include "Structs/RenderInstance.hlsli"
    #include "Structs/CameraFrameData.hlsli"

    cbuffer FrameDataBuffer
    {
        CameraFrameData FrameData;
    };

    //StructuredBuffer<Transform> Transforms;
    StructuredBuffer<RenderInstance> RenderInstances;

    StructuredBuffer<float3> PositionBuffer;
    StructuredBuffer<float3> NormalBuffer;
    StructuredBuffer<float2> TexCoordBuffer;
    StructuredBuffer<float3> TangentBuffer;

    //

    struct vs_input{VS_INPUT_LAYOUT};
    struct vs_output{VS_OUTPUT_LAYOUT};

    void main(in vs_input vsIn, out vs_output vsOut)
    {
        RenderInstance instance = RenderInstances[vsIn.instance_id];

        float3 position = PositionBuffer[vsIn.vertex_id + instance.PositionOffset];
        float3 normal = NormalBuffer[vsIn.vertex_id + instance.NormalOffset];
        float2 tex_coord = TexCoordBuffer[vsIn.vertex_id + instance.TexCoordOffset];
        float3 tangent = TangentBuffer[vsIn.vertex_id + instance.TangentOffset];

        #if 0
        float4x4 world = Transforms[instance.TransformId].World;
        vsOut.screen_position = mul(float4(position, 1.0), world);
        vsOut.world_position = vsOut.screen_position.xyz;
        vsOut.world_normal = mul(float4(normal, 0.0), world).xyz;
        vsOut.world_tangent = mul(float4(tangent, 0.0), world).xyz;
        vsOut.tex_coord = tex_coord;
        #endif

        vsOut.screen_position = mul(float4(position, 1.0), FrameData.ViewProjection);
        vsOut.world_position  = position;
        vsOut.world_normal    = normal;
        vsOut.world_tangent   = tangent;
        vsOut.tex_coord       = tex_coord;
    }
    */
    class RenderIndirectCommandsVertexShader : public EngineShader
    {
    private:
        // clang-format off
        static constexpr const uint8_t c_SourceCode[] {
            0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x9D, 0x54, 0x5D, 0x4F, 0xDB, 0x30, 
            0x14, 0x7D, 0x26, 0x52, 0xFE, 0x83, 0x05, 0x2F, 0x2D, 0xAB, 0x52, 0x06, 0xBC, 0xB1, 0x55, 0xDA, 
            0x8A, 0x90, 0x22, 0x4D, 0xB4, 0x1A, 0x05, 0x34, 0x21, 0x14, 0x79, 0xB1, 0xB3, 0x19, 0x25, 0x36, 
            0xB2, 0x9D, 0x36, 0x80, 0xF8, 0xEF, 0xF3, 0x47, 0xED, 0x38, 0x6D, 0x49, 0xA5, 0xBD, 0x34, 0xD7, 
            0xF7, 0x9E, 0x73, 0xEE, 0xF5, 0xB9, 0x4D, 0x8E, 0x08, 0xCD, 0xCB, 0x1A, 0x61, 0x70, 0x78, 0x23, 
            0x79, 0x9D, 0x4B, 0x31, 0xBE, 0xE4, 0x70, 0x95, 0x52, 0x84, 0x1B, 0x8C, 0xD4, 0x83, 0x70, 0x9C, 
            0xCB, 0x29, 0xAB, 0x2A, 0x48, 0x51, 0xF2, 0xB7, 0x14, 0x25, 0x39, 0x8C, 0xA3, 0xA3, 0x2D, 0xD2, 
            0x82, 0x43, 0x2A, 0x0A, 0xC6, 0xAB, 0x1E, 0xCC, 0x4F, 0xAC, 0x54, 0x79, 0x4A, 0x85, 0x84, 0x34, 
            0xC7, 0x3D, 0xC0, 0x29, 0xAC, 0x30, 0x87, 0x57, 0x5C, 0x3D, 0x2E, 0xA1, 0x84, 0x1E, 0x19, 0x47, 
            0xF9, 0xEF, 0xBA, 0x28, 0x30, 0x07, 0xBE, 0xF6, 0xDD, 0x9C, 0xE3, 0xE8, 0x2D, 0x8E, 0x0E, 0x36, 
            0x68, 0x2D, 0xE8, 0x22, 0x8E, 0xDE, 0x2F, 0x34, 0x7D, 0x3C, 0xB6, 0x2D, 0x6A, 0x8E, 0x91, 0x65, 
            0x7E, 0xF1, 0x83, 0x4F, 0x80, 0x0F, 0x85, 0x02, 0x6F, 0x01, 0xBB, 0xD3, 0x4F, 0x40, 0xF7, 0x2C, 
            0x8C, 0xFE, 0x16, 0xA9, 0x28, 0x19, 0x94, 0x67, 0x13, 0x30, 0x67, 0x82, 0x48, 0xC2, 0xA8, 0x4D, 
            0xEF, 0x92, 0x77, 0xC8, 0x6B, 0xD5, 0x1F, 0x96, 0x7B, 0x70, 0xA7, 0x6A, 0x58, 0xDC, 0x4C, 0x19, 
            0xE3, 0x68, 0xBF, 0xE2, 0x02, 0xD2, 0x3F, 0x98, 0x4A, 0x0F, 0xD4, 0x36, 0xE8, 0x5F, 0x61, 0x08, 
            0x60, 0x29, 0x32, 0x42, 0x9F, 0x6B, 0xF9, 0x76, 0x77, 0x93, 0xA5, 0xD7, 0xF3, 0xDB, 0x45, 0xF6, 
            0xE3, 0xDB, 0xAF, 0xD9, 0xED, 0x42, 0x3B, 0xD6, 0x42, 0x58, 0x2D, 0xD7, 0x18, 0x55, 0xEA, 0x82, 
            0xE2, 0x68, 0xC9, 0x08, 0x02, 0x15, 0x24, 0x74, 0x40, 0xA8, 0xD7, 0x53, 0x41, 0x4A, 0x47, 0x80, 
            0xD5, 0x01, 0x5F, 0x45, 0xB3, 0x5A, 0x0E, 0xED, 0xBA, 0xBA, 0x06, 0x02, 0xE2, 0x82, 0xAF, 0x9B, 
            0xD6, 0x3E, 0x68, 0xA5, 0xC4, 0xD5, 0x33, 0x82, 0x1E, 0x4D, 0xD7, 0x03, 0x7B, 0x41, 0xF0, 0xBC, 
            0xF6, 0x56, 0x11, 0xBB, 0x36, 0x5B, 0xDE, 0x12, 0x73, 0x89, 0x1B, 0xC5, 0x02, 0x9F, 0x7C, 0x8F, 
            0xC4, 0x01, 0x67, 0x45, 0x21, 0xB0, 0xD4, 0x7A, 0x4E, 0x8D, 0x1A, 0xFF, 0x95, 0x56, 0xB8, 0x88, 
            0x1E, 0x25, 0x0B, 0xDB, 0xD4, 0x39, 0x05, 0x1A, 0x99, 0xEB, 0x05, 0x29, 0xA9, 0xEE, 0xAE, 0x7A, 
            0xC4, 0x1C, 0x70, 0x7B, 0x2C, 0x69, 0x97, 0xA8, 0xC5, 0xC2, 0x75, 0xF6, 0x69, 0x59, 0x5C, 0x2B, 
            0xA5, 0xC4, 0xC6, 0xC7, 0x4E, 0xF1, 0xBC, 0x39, 0x07, 0x2B, 0xC6, 0x4B, 0x33, 0x9E, 0xFF, 0xDF, 
            0x3F, 0xB4, 0x6C, 0x97, 0x4B, 0xD1, 0x63, 0x72, 0xAF, 0x81, 0x7A, 0x18, 0xB3, 0xBE, 0x44, 0xE4, 
            0x1C, 0x63, 0x9A, 0x05, 0xBE, 0x57, 0x75, 0x39, 0xB0, 0xB2, 0x03, 0x97, 0x1D, 0x81, 0xCF, 0xC9, 
            0xC9, 0x70, 0x64, 0x9B, 0x0C, 0x5B, 0xB2, 0x39, 0x87, 0xDC, 0x9D, 0x9A, 0x49, 0xF3, 0xF2, 0xBA, 
            0xC9, 0xF1, 0x9B, 0x09, 0xBA, 0xD9, 0xDC, 0x08, 0x9C, 0x04, 0xBD, 0x76, 0x71, 0x5B, 0xFB, 0x02, 
            0xF2, 0x3A, 0xD9, 0xC7, 0x0E, 0xB7, 0xE8, 0x63, 0x5D, 0x3E, 0x36, 0xAF, 0xD0, 0xFF, 0x18, 0xD2, 
            0x7E, 0xD6, 0xEE, 0x08, 0x5E, 0xCD, 0x39, 0x7B, 0x52, 0x1F, 0x58, 0x55, 0xEF, 0xF3, 0xC8, 0x85, 
            0x1F, 0x5A, 0x62, 0x83, 0x8F, 0x6F, 0xBD, 0x8E, 0xF6, 0x5F, 0xEC, 0xFD, 0x1F, 0x75, 0xB8, 0xE7, 
            0xBF, 0x10, 0x06, 0x00, 0x00
        };
        // clang-format on

    public:
        RenderIndirectCommandsVertexShader()
        {
            SetupCompressed({ "Render Indirect Commands VS", Dg::SHADER_TYPE_VERTEX, true }, c_SourceCode);
            LinkShaders();
        }

    private:
        void LinkShaders()
        {
            StructDrawIndexedIndirectCommandShader drawIndexedStruct;
            StructTransformShader                  transformStruct;
            StructRenderInstanceShader             renderInstanceStruct;
            StructCameraFrameDataShader            cameraFrameDataStruct;

            m_LinkedShaders = Dg::CreateMemoryShaderSourceFactory(
                { { drawIndexedStruct.Name, drawIndexedStruct.GetCreateInfo().Source, static_cast<uint32_t>(drawIndexedStruct.GetCreateInfo().SourceLength) },
                  { transformStruct.Name, transformStruct.GetCreateInfo().Source, static_cast<uint32_t>(transformStruct.GetCreateInfo().SourceLength) },
                  { renderInstanceStruct.Name, renderInstanceStruct.GetCreateInfo().Source, static_cast<uint32_t>(renderInstanceStruct.GetCreateInfo().SourceLength) },
                  { cameraFrameDataStruct.Name, cameraFrameDataStruct.GetCreateInfo().Source, static_cast<uint32_t>(cameraFrameDataStruct.GetCreateInfo().SourceLength) } },
                true);
            m_CreateInfo.pShaderSourceStreamFactory = m_LinkedShaders;
        }

    private:
        Ptr<Dg::IShaderSourceInputStreamFactory> m_LinkedShaders;
    };

    /*
    struct ps_input{VS_OUTPUT_LAYOUT};
    struct ps_output{float4 color : SV_TARGET;};

    void do_main(in ps_input psIn, out ps_output psOut)
    {
        psOut.color = float4(1.0, 0.0, 0.0, 1.0);
    }
    */
    class RenderIndirectCommandsPixelShader : public EngineShader
    {
        // clang-format off
        static constexpr const uint8_t c_SourceCode[] {
            0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x2B, 0x2E, 0x29, 0x2A, 0x4D, 0x2E, 
            0x51, 0x28, 0x28, 0x8E, 0xCF, 0xCC, 0x2B, 0x28, 0x2D, 0xA9, 0x0E, 0x0B, 0x8E, 0xF7, 0x0F, 0x0D, 
            0x09, 0x08, 0x0D, 0x89, 0xF7, 0x71, 0x8C, 0x04, 0xB2, 0x6A, 0xAD, 0x79, 0xB9, 0x8A, 0xE1, 0x6A, 
            0xF2, 0x4B, 0x4B, 0x40, 0x8A, 0xD2, 0x72, 0xF2, 0x13, 0x4B, 0x4C, 0x14, 0x92, 0xF3, 0x73, 0xF2, 
            0x8B, 0x14, 0xAC, 0x14, 0x82, 0xC3, 0xE2, 0x43, 0x1C, 0x83, 0xDC, 0x5D, 0x43, 0xAC, 0x41, 0xAA, 
            0x79, 0xB9, 0xCA, 0xF2, 0x33, 0x53, 0x14, 0x72, 0x13, 0x33, 0xF3, 0x34, 0x32, 0xF3, 0xE0, 0x26, 
            0x03, 0x19, 0x9E, 0x79, 0x3A, 0x0A, 0xF9, 0xA5, 0x48, 0x06, 0x01, 0x59, 0xFE, 0xA5, 0x25, 0x9A, 
            0xBC, 0x5C, 0xD5, 0xBC, 0x5C, 0x9C, 0x60, 0xB6, 0x1E, 0xC4, 0x4C, 0x5B, 0x05, 0x88, 0x15, 0x1A, 
            0x86, 0x7A, 0x06, 0x3A, 0x0A, 0x06, 0x70, 0x02, 0xC8, 0xD5, 0x04, 0x5A, 0x51, 0x0B, 0x00, 0xD0, 
            0xC6, 0xD4, 0x9C, 0xB6, 0x00, 0x00, 0x00
        };
        // clang-format on

    public:
        RenderIndirectCommandsPixelShader()
        {
            SetupCompressed({ "Render Indirect Commands PS", Dg::SHADER_TYPE_PIXEL, true }, c_SourceCode);
        }
    };
} // namespace Ame::Rhi