#pragma once

#include <Shaders/EngineShader.hpp>

namespace Ame::Rhi
{
    /*
    cbuffer Constants
    {
        float4x4 ProjectionMatrix;
    };
    struct vs_input
    {
        float2 pos : ATTRIB0;
        float2 uv  : ATTRIB1;
        float4 col : ATTRIB2;
    };
    struct vs_output
    {
        float4 pos : SV_POSITION;
        float4 col : COLOR0;
        float2 uv  : TEX_COORD;
    };
    void main(in vs_input vsIn, out vs_output vsOut)
    {
        vsOut.pos = mul(ProjectionMatrix, float4(vsIn.pos.xy, 0.0, 1.0));
        vsOut.col = vsIn.col;
        vsOut.uv  = vsIn.uv;
    }
    */
    class ImGuiRenderVertexShader : public EngineShader
    {
    private:
        // clang-format off
        static constexpr const uint8_t c_SourceCode[] {
            0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x6D, 0x90, 0x41, 0x8B, 0x83, 0x30, 
            0x10, 0x85, 0xEF, 0x82, 0xFF, 0x61, 0x8E, 0x0A, 0x22, 0xB6, 0x78, 0xAA, 0xF4, 0xB0, 0xB5, 0x3D, 
            0x08, 0xBB, 0x9B, 0x62, 0x65, 0xD9, 0x9B, 0x58, 0x5B, 0x21, 0xC5, 0x66, 0x8A, 0x99, 0x11, 0x97, 
            0xB2, 0xFF, 0x7D, 0x4D, 0x11, 0xD1, 0x6D, 0x03, 0x81, 0x37, 0xBC, 0xE4, 0xBD, 0x2F, 0x29, 0x8F, 
            0x5C, 0x55, 0xE7, 0x06, 0x62, 0x54, 0x9A, 0x0A, 0x45, 0xDA, 0xB6, 0xEE, 0xB6, 0x05, 0xFD, 0xAA, 
            0x6A, 0x2C, 0x28, 0xEC, 0x42, 0xD8, 0x37, 0x78, 0x39, 0x97, 0x24, 0x51, 0x7D, 0x14, 0xD4, 0xC8, 
            0x2E, 0xB2, 0xAD, 0xDF, 0x7E, 0x6B, 0x6A, 0xB8, 0x24, 0x68, 0x75, 0x2E, 0xD5, 0x8D, 0x69, 0x7E, 
            0x6F, 0x09, 0x37, 0xD4, 0xB0, 0x82, 0xB7, 0x2C, 0x4B, 0x93, 0x4D, 0x10, 0xCD, 0x2C, 0x6E, 0x61, 
            0xB4, 0x16, 0x53, 0x2B, 0x84, 0x12, 0xEB, 0xD1, 0x5A, 0x3E, 0x15, 0x21, 0xD3, 0x53, 0x53, 0x38, 
            0x34, 0x1D, 0xBE, 0xF2, 0xBD, 0x38, 0x24, 0x59, 0x22, 0x3E, 0x5F, 0x45, 0xC6, 0xE2, 0x5D, 0xA4, 
            0x2F, 0x39, 0xB2, 0xDD, 0x77, 0x1E, 0x0B, 0x91, 0x6E, 0x87, 0xBA, 0x16, 0xE5, 0x09, 0xAE, 0x85, 
            0x54, 0x8E, 0x54, 0xE3, 0xEB, 0x7A, 0x91, 0x28, 0x0F, 0x90, 0x27, 0x1C, 0xBD, 0x12, 0x4C, 0xEE, 
            0x88, 0xF3, 0x18, 0x7D, 0x43, 0xB3, 0x86, 0x2B, 0xD7, 0xCE, 0xFF, 0x7F, 0xF3, 0x06, 0x22, 0xC7, 
            0x64, 0x99, 0x73, 0x7E, 0xF7, 0xE3, 0x41, 0xE0, 0x07, 0x1E, 0x2C, 0xFC, 0xC0, 0x75, 0xA3, 0x69, 
            0x8C, 0xA1, 0x5E, 0x3F, 0x5A, 0x8D, 0x9C, 0x59, 0x06, 0x7B, 0xB0, 0xB8, 0x35, 0xD0, 0x7F, 0x9C, 
            0xB5, 0x1A, 0xDE, 0xC4, 0x01, 0x00, 0x00
        };

        // clang-format on

    public:
        ImGuiRenderVertexShader()
        {
            SetupCompressed({ "ImGui VS", Dg::SHADER_TYPE_VERTEX, true }, c_SourceCode);
        }
    };

    /*
    #ifndef SRGBA_TO_LINEAR
    #define SRGBA_TO_LINEAR(x)
    #endif
    Texture2D    Texture;
    SamplerState Texture_sampler;
    struct ps_input
    {
        float4 pos : SV_POSITION;
        float4 col : COLOR0;
        float2 uv  : TEX_COORD;
    };
    float4 main(in ps_input psIn) : SV_Target
    {
        float4 col = Texture.Sample(Texture_sampler, psIn.uv) * psIn.col;
        col.rgb *= col.a;
        SRGBA_TO_LINEAR(col)
        return col;
    }
    */
    class ImGuiRenderPixelShader : public EngineShader
    {
        // clang-format off
        static constexpr const uint8_t c_SourceCode[] {
            0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x5D, 0x90, 0x51, 0x6B, 0xC2, 0x30, 
            0x10, 0xC7, 0x9F, 0x1B, 0xC8, 0x77, 0x38, 0xF0, 0xA5, 0x95, 0x51, 0x44, 0xF6, 0x34, 0xF1, 0xC1, 
            0xA9, 0x48, 0x41, 0xCC, 0x68, 0xC2, 0xD8, 0x5B, 0xC8, 0x34, 0x95, 0x40, 0x4D, 0x4B, 0x9A, 0x88, 
            0x30, 0xFC, 0xEE, 0xBB, 0x2E, 0x3A, 0xB4, 0x81, 0x90, 0xCB, 0xFD, 0xB8, 0xFF, 0xFF, 0xEE, 0x46, 
            0xA6, 0xB2, 0x07, 0x5D, 0x01, 0x2F, 0x37, 0xEF, 0x0B, 0x29, 0x98, 0xDC, 0x16, 0xBB, 0xF5, 0xA2, 
            0xA4, 0x64, 0x84, 0x59, 0x63, 0xF5, 0x10, 0xA4, 0x97, 0x0C, 0x99, 0xB6, 0x07, 0x53, 0x51, 0x22, 
            0xF4, 0xC5, 0x07, 0xA7, 0xA7, 0x2B, 0xC0, 0x73, 0xFB, 0xCC, 0x28, 0xE1, 0xEA, 0xD4, 0xD6, 0xDA, 
            0x71, 0xAF, 0xBC, 0xBE, 0xA7, 0x65, 0x17, 0x93, 0x88, 0x3B, 0xEF, 0xC2, 0xDE, 0x43, 0xDB, 0x49, 
            0x63, 0xDB, 0xE0, 0x29, 0xF9, 0xA1, 0xA4, 0x17, 0xA8, 0xEA, 0x46, 0xF9, 0x57, 0x68, 0x9B, 0x0E, 
            0xDE, 0x80, 0x7F, 0xCA, 0x0F, 0xC6, 0x0B, 0x51, 0xB0, 0xDD, 0xEC, 0x09, 0xEF, 0x9B, 0x1A, 0xF1, 
            0x92, 0x6D, 0x59, 0x39, 0x79, 0x24, 0x53, 0x08, 0x67, 0x40, 0x22, 0xD6, 0x5F, 0x72, 0xC9, 0x58, 
            0xB9, 0x42, 0x78, 0xC5, 0x7B, 0x2B, 0x3B, 0x29, 0x63, 0x53, 0x63, 0xFF, 0x5D, 0x31, 0x28, 0x6C, 
            0x16, 0x8D, 0x84, 0x72, 0x47, 0x1D, 0xFB, 0x48, 0x1E, 0x5C, 0xE6, 0xF7, 0xDE, 0xF3, 0x38, 0x50, 
            0x3A, 0x18, 0xE5, 0xE5, 0x4F, 0x23, 0x0F, 0xE7, 0x0C, 0xC6, 0x31, 0xC4, 0x2A, 0x74, 0x4C, 0xF0, 
            0xC9, 0xDD, 0xF1, 0x1B, 0xC6, 0xF3, 0x5E, 0x27, 0x57, 0x7D, 0x6E, 0xB8, 0x46, 0x04, 0xB8, 0xC8, 
            0xC4, 0x69, 0x54, 0xB4, 0x10, 0x0B, 0xAF, 0xBF, 0x77, 0x65, 0x9D, 0x4D, 0x8D, 0x01, 0x00, 0x00, 
        };
        // clang-format on

    public:
        ImGuiRenderPixelShader()
        {
            SetupCompressed({ "ImGui PS", Dg::SHADER_TYPE_PIXEL, true }, c_SourceCode);
        }
    };
} // namespace Ame::Rhi