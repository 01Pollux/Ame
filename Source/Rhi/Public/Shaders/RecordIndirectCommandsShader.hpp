#pragma once

#include <Shaders/EngineShader.hpp>
#include <DiligentCore/Graphics/GraphicsTools/interface/ShaderSourceFactoryUtils.hpp>

#include <Shaders/Structs/DrawIndexedIndirectCommand.hpp>
#include <Shaders/Structs/Transform.hpp>
#include <Shaders/Structs/RenderInstance.hpp>

namespace Ame::Rhi
{
    /*
#ifndef NUM_THREADS_PER_OBJECT
#define NUM_THREADS_PER_OBJECT 64
#endif

#include "Structs/DrawIndexedIndirectCommand.hlsli"
#include "Structs/Transform.hlsli"
#include "Structs/RenderInstance.hlsli"

cbuffer DispatchConstants{uint FirstInstance;uint InstanceCount;uint CounterOffset;};

//

// StructuredBuffer<Transform> Transforms;
// StructuredBuffer<AABB> AABBs;
// StructuredBuffer<Sphere> Spheres;

StructuredBuffer<RenderInstance> RenderInstances;
Buffer<uint> SortedRenderInstances;

RWStructuredBuffer<DrawIndexedIndirectCommand> Commands;
RWBuffer<uint> CommandCount;

//

groupshared uint _DrawCount;

//

[numthreads(NUM_THREADS_PER_OBJECT, 1, 1)]
void main(uint threadId : SV_DispatchThreadId)
{
    if (threadId == 0)
    {
        _DrawCount = 0;
    }
    GroupMemoryBarrierWithGroupSync();

    for (uint i = threadId; i < InstanceCount; i += NUM_THREADS_PER_OBJECT)
    {
        uint ordIdx = FirstInstance + i;
        uint instIdx = SortedRenderInstances[ordIdx];
        RenderInstance instance = RenderInstances[instIdx];

        #if 0
        // TODO: cull
        switch (INSTANCE_CODE_BOUNDING(instance.Code))
        {
        case INSTANCE_CODE_BOUNDING_AABB:
        {
            float4x4 world = Transforms[instance.TransformId].World;
            AABB aabb = AABBs[instance.BoundingId] * world;
            if (!IntersectAABB(aabb, frustum))
            {
                continue;
            }
        }
        break;
        case INSTANCE_CODE_BOUNDING_SPHERE:
        {
            float4x4 world = Transforms[instance.TransformId].World;
            Sphere sphere = Spheres[instance.BoundingId] * world;
            if (!IntersectSphere(sphere, frustum))
            {
                continue;
            }
        }
        break;
        }
        #endif

        uint commandIndex;
        InterlockedAdd(_DrawCount, 1, commandIndex);

        DrawIndexedIndirectCommand command = (DrawIndexedIndirectCommand)0;
        command.NumIndices                 = instance.IndexCount;
        command.NumInstances               = 1;
        command.FirstIndexLocation         = instance.IndexOffset;
        command.FirstInstanceLocation      = instIdx;

        Commands[commandIndex] = command;
    }

    GroupMemoryBarrierWithGroupSync();
    if (threadId == 0)
    {
        CommandCount[CounterOffset] = _DrawCount;
    }
}
    */
    class RecordIndirectCommandsShader : public EngineShader
    {
    private:
        // clang-format off
        static constexpr const uint8_t c_SourceCode[] {
            0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xAD, 0x55, 0x59, 0x4F, 0xE3, 0x30, 
            0x10, 0x7E, 0x4E, 0xA5, 0xFE, 0x87, 0x59, 0x78, 0x49, 0x01, 0x51, 0x90, 0xD0, 0x3E, 0x50, 0x5A, 
            0xA9, 0xD7, 0x42, 0x57, 0x4B, 0x8B, 0xDA, 0xB2, 0x3C, 0x54, 0x55, 0x94, 0x26, 0x0E, 0xB5, 0x48, 
            0x6C, 0x64, 0x3B, 0x0B, 0x08, 0xF1, 0xDF, 0x77, 0x6C, 0x27, 0x69, 0xD3, 0x63, 0x2F, 0xAD, 0xD4, 
            0x3A, 0xF1, 0xF8, 0xFB, 0xE6, 0xF0, 0x1C, 0x39, 0xA4, 0x11, 0x0B, 0x49, 0x04, 0xC3, 0xFB, 0x5B, 
            0x6F, 0x7A, 0x33, 0xEE, 0xB7, 0x7B, 0x13, 0xEF, 0xAE, 0x3F, 0xF6, 0x46, 0x9D, 0xAF, 0xFD, 0xEE, 
            0xB4, 0x5A, 0x39, 0xC4, 0x43, 0xCA, 0xC8, 0x9E, 0x73, 0xF8, 0x7C, 0x81, 0x10, 0xC2, 0x42, 0x1A, 
            0x55, 0x2B, 0xF8, 0x46, 0x59, 0x10, 0xA7, 0x21, 0x81, 0x83, 0x89, 0x12, 0x69, 0xA0, 0x64, 0xBD, 
            0x27, 0xFC, 0x97, 0x01, 0x1A, 0x78, 0x25, 0x21, 0x3E, 0xA8, 0x20, 0x81, 0xEA, 0xF2, 0x24, 0xF1, 
            0x59, 0x78, 0xBA, 0x8C, 0x65, 0x4C, 0x0F, 0x76, 0x91, 0xA6, 0xC2, 0x67, 0x32, 0xE2, 0x22, 0xF9, 
            0x05, 0x66, 0x8C, 0x46, 0x89, 0x18, 0x30, 0xA9, 0x7C, 0x16, 0x90, 0x02, 0x58, 0xAD, 0x04, 0x8B, 
            0x34, 0x8A, 0x88, 0x80, 0x1E, 0x95, 0xCF, 0xBE, 0x0A, 0x96, 0x5D, 0x6E, 0x30, 0x4A, 0xBE, 0xA7, 
            0x94, 0x29, 0xF8, 0x42, 0x85, 0x54, 0x39, 0xAD, 0x61, 0x44, 0xF9, 0xAE, 0xCB, 0x53, 0xA6, 0xAC, 
            0xC8, 0xBC, 0x12, 0x31, 0x8A, 0x22, 0x49, 0x54, 0xE3, 0xA3, 0xA1, 0x15, 0xD7, 0xEB, 0x76, 0x05, 
            0xEB, 0x42, 0x2A, 0x48, 0xD8, 0x31, 0xA6, 0xAE, 0x0A, 0x7F, 0x5B, 0x50, 0xBC, 0xCA, 0xC6, 0x6E, 
            0x6C, 0xBB, 0xDD, 0xE9, 0xB4, 0x40, 0xAF, 0xFB, 0x10, 0x93, 0xE7, 0x25, 0x11, 0xA4, 0x05, 0xF6, 
            0x29, 0x8D, 0xED, 0x2D, 0x50, 0x39, 0xFC, 0x16, 0x94, 0xF7, 0x9A, 0xB4, 0x45, 0xD1, 0x81, 0xA1, 
            0x56, 0x2E, 0x14, 0x09, 0xB7, 0xE1, 0xD5, 0xCA, 0xF8, 0x61, 0x8B, 0xB2, 0x3F, 0x7B, 0x2D, 0xD0, 
            0x67, 0xD9, 0x46, 0xF3, 0x77, 0xB0, 0xAD, 0xC1, 0x35, 0x9C, 0xB9, 0x55, 0xB9, 0x76, 0x99, 0x8F, 
            0x82, 0xA7, 0xCF, 0x72, 0xE9, 0x23, 0x07, 0xCC, 0xBD, 0x7B, 0x16, 0xAD, 0xF3, 0xB0, 0x42, 0xCD, 
            0x58, 0x9A, 0xA8, 0xA5, 0x20, 0x7E, 0x28, 0xDD, 0xDD, 0x65, 0x78, 0x02, 0xE7, 0xF8, 0xAB, 0xCD, 
            0xAB, 0x95, 0x1F, 0x9C, 0x86, 0x90, 0xF8, 0x94, 0xB9, 0x46, 0x9F, 0xA5, 0x0D, 0x42, 0xB8, 0x84, 
            0xC9, 0x77, 0x2F, 0x2F, 0x89, 0x69, 0x26, 0xAD, 0x55, 0x2B, 0xEF, 0xD5, 0x8A, 0x43, 0x23, 0x70, 
            0x0B, 0x60, 0xB3, 0x09, 0x67, 0x28, 0x77, 0xF4, 0x81, 0xB3, 0x72, 0x07, 0x50, 0x8C, 0x2E, 0x39, 
            0x1F, 0xF8, 0xBF, 0xD6, 0x5E, 0xDF, 0x92, 0x84, 0x8B, 0xB7, 0x8E, 0x2F, 0x04, 0x25, 0xE2, 0x81, 
            0xAA, 0xA5, 0x91, 0x4E, 0xDE, 0x58, 0xE0, 0xD6, 0x34, 0x10, 0x7F, 0x58, 0x06, 0x60, 0xDD, 0xA0, 
            0x48, 0xCF, 0x2D, 0x34, 0x70, 0x77, 0xB5, 0x51, 0x73, 0x28, 0x3A, 0x6E, 0xEE, 0x69, 0xB1, 0xC2, 
            0x19, 0xA3, 0x89, 0x0B, 0x54, 0xF1, 0x8A, 0xEA, 0x4A, 0x75, 0x0C, 0xC7, 0x40, 0x1B, 0x05, 0x86, 
            0xA2, 0xD4, 0x82, 0x76, 0x26, 0x7B, 0x66, 0x75, 0xCC, 0x0D, 0xA1, 0x7C, 0x66, 0xA8, 0xE6, 0xA5, 
            0xB9, 0x59, 0x51, 0xB3, 0x4C, 0xEB, 0xDC, 0x24, 0xC6, 0x71, 0xEA, 0x47, 0x66, 0xAD, 0xC3, 0x74, 
            0xD4, 0x1B, 0x5D, 0x42, 0x90, 0xC6, 0xB1, 0x16, 0xC8, 0x17, 0x8A, 0x17, 0x0C, 0xEE, 0x60, 0x38, 
            0x99, 0xB6, 0x87, 0xDD, 0xBE, 0xD7, 0x1D, 0xF5, 0xFA, 0x5E, 0x67, 0x74, 0x3F, 0xEC, 0x0D, 0x86, 
            0xD7, 0x6E, 0xAE, 0xFF, 0xB4, 0xCB, 0x43, 0x52, 0xD3, 0xA1, 0xD9, 0xD8, 0x02, 0x5F, 0x12, 0xD8, 
            0xCD, 0xF1, 0x74, 0xAF, 0x5C, 0x16, 0x48, 0x27, 0x8A, 0xB9, 0xAF, 0x2E, 0x5E, 0x2F, 0xE0, 0x85, 
            0x8B, 0x18, 0xF3, 0xB5, 0xD6, 0x72, 0xB3, 0x42, 0x7D, 0x21, 0x1B, 0x84, 0xF3, 0xD3, 0x07, 0x0D, 
            0x34, 0xD1, 0x3A, 0x5A, 0x17, 0xF8, 0xFE, 0x62, 0x81, 0x3C, 0xD3, 0x83, 0x2B, 0x4A, 0x07, 0x33, 
            0x11, 0x52, 0xF6, 0x88, 0x0C, 0x38, 0xB2, 0xCA, 0x2D, 0x47, 0x97, 0xC7, 0xA7, 0x81, 0x1E, 0x07, 
            0x12, 0xEB, 0x5F, 0xB3, 0x5C, 0xAD, 0xE1, 0x04, 0x22, 0x91, 0x4A, 0x95, 0x26, 0x36, 0x8C, 0xCC, 
            0x3B, 0x27, 0xE0, 0x4C, 0x51, 0x96, 0x12, 0xCB, 0xD5, 0xE5, 0x62, 0x97, 0x05, 0x66, 0xFF, 0xA9, 
            0xF1, 0xBB, 0x58, 0x27, 0x77, 0x37, 0xFD, 0x71, 0xFF, 0x7F, 0x45, 0x6B, 0x27, 0x08, 0x48, 0xFB, 
            0x68, 0xE6, 0x13, 0xE5, 0xAF, 0x63, 0xB6, 0x3C, 0xD7, 0xEA, 0xF9, 0xE7, 0xB8, 0xCD, 0xF6, 0xA8, 
            0xAE, 0xD7, 0xA2, 0x54, 0x03, 0x3B, 0x18, 0xCC, 0x8C, 0x31, 0x20, 0x63, 0x33, 0xE6, 0xC1, 0x13, 
            0x09, 0xDB, 0x61, 0xE8, 0xAE, 0x1A, 0xD0, 0xB4, 0xF8, 0x3A, 0xDC, 0x74, 0x99, 0xD1, 0xB4, 0x7F, 
            0x4A, 0xE5, 0x04, 0x8C, 0xDD, 0xDD, 0x8F, 0xAA, 0x9D, 0xD9, 0xBC, 0x64, 0xDF, 0xA5, 0x61, 0x9A, 
            0x68, 0x00, 0xD6, 0x3C, 0xD2, 0x8A, 0xAB, 0x32, 0xD4, 0x7C, 0x32, 0x6D, 0x80, 0xB3, 0x16, 0x41, 
            0xF8, 0x79, 0xE9, 0x30, 0xEB, 0x51, 0x24, 0x7E, 0xE3, 0x81, 0xAF, 0x28, 0x67, 0x5B, 0x1A, 0xB3, 
            0x2F, 0xCC, 0x0E, 0x96, 0x45, 0x6D, 0x10, 0xB1, 0x01, 0x4B, 0x61, 0xE7, 0x03, 0x78, 0xB6, 0x7E, 
            0x33, 0x73, 0x04, 0x67, 0xFB, 0x7C, 0x64, 0xFD, 0xE9, 0xD4, 0xDA, 0x3F, 0x0A, 0xB7, 0xC6, 0xF8, 
            0xAC, 0xF4, 0x8D, 0xD4, 0x36, 0x4B, 0xC3, 0x5B, 0x9B, 0xFD, 0xF8, 0x09, 0x62, 0xE0, 0x66, 0xE5, 
            0x5D, 0x08, 0x00, 0x00
        };
        // clang-format on

    public:
        RecordIndirectCommandsShader()
        {
            SetupCompressed({ "Record Indirect Commands", Dg::SHADER_TYPE_COMPUTE }, c_SourceCode);
            LinkShaders();
        }

    private:
        void LinkShaders()
        {
            StructDrawIndexedIndirectCommandShader drawIndexedStruct;
            StructTransformShader                  transformStruct;
            StructRenderInstanceShader             renderInstanceStruct;

            m_LinkedShaders = Dg::CreateMemoryShaderSourceFactory(
                { { drawIndexedStruct.Name, drawIndexedStruct.GetCreateInfo().Source, static_cast<uint32_t>(drawIndexedStruct.GetCreateInfo().SourceLength) },
                  { transformStruct.Name, transformStruct.GetCreateInfo().Source, static_cast<uint32_t>(transformStruct.GetCreateInfo().SourceLength) },
                  { renderInstanceStruct.Name, renderInstanceStruct.GetCreateInfo().Source, static_cast<uint32_t>(renderInstanceStruct.GetCreateInfo().SourceLength) } },
                true);
            m_CreateInfo.pShaderSourceStreamFactory = m_LinkedShaders;
        }

    private:
        Ptr<Dg::IShaderSourceInputStreamFactory> m_LinkedShaders;
    };
} // namespace Ame::Rhi